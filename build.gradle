buildscript {
    repositories {
        jcenter()
        maven {
            name = "Forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.

def username = "${mod_name}"
if (project.hasProperty('dev_mail')) {
    username = "${dev_mail}"
}
else if(project.hasProperty('dev_username')) {
    username = "${project.dev_username}"
}

version = "${project.minecraft_version}-${project.mod_version}"
group= project.base_package // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.mod_name

sourceCompatibility = targetCompatibility = project.jvm_version // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = project.jvm_version
}

repositories {
    maven {
        //JEI files
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "http://modmaven.k-4u.nl"
    }

    maven {
        //fallback for almost everything, this is CurseForge :P
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

minecraft {
    version = "${project.minecraft_version}-${project.forge_version}"
    if(file('../run').exists()) {
		runDir = "../run"
	}
	else
	{
		runDir = "run"
	}

    mappings = project.forge_mappings
    makeObfSourceJar = true
	
    replace "@VERSION@", project.mod_version
    replace "@FINGERPRINTKEY@", "${project.public_key}".replace(":", "").toLowerCase(Locale.ROOT)
    replaceIn "core/upcraftlp/craftdev/common/CraftDevReference.java"

    clientRunArgs += "--username=${username}"
    if(project.hasProperty('dev_password')) {
        clientRunArgs += " --password=${dev_password}"
    }
    serverRunArgs += "nogui"
    clientJvmArgs += "-Dfml.coreMods.load=core.upcraftlp.craftdev.asm.CraftDevLoadingPlugin"
    serverJvmArgs += "-Dfml.coreMods.load=core.upcraftlp.craftdev.asm.CraftDevLoadingPlugin"
    serverJvmArgs += "-Dfml.queryResult=confirm"
}

configurations {
    compile.extendsFrom exportedCompile
}

reobf {
    jar
}

// API jar
task apiJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.allJava
    include 'core/upcraftlp/craftdev/api/**'
    classifier = 'api'
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

jar {
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest.mainAttributes(
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Built-On": "${minecraft_version}-${forge_version}",
            "FMLCorePlugin": "core.upcraftlp.craftdev.asm.CraftDevLoadingPlugin",
            "FMLCorePluginContainsFMLMod": "true",
            "FMLAT": "${project.mod_name}_at.cfg"
    )
    classifier = 'universal'
}

//sign Jar
task signJar(type: SignJar, dependsOn: reobfJar) {
    if(project.hasProperty('sign_keyStore')) {
        keyPass = "${sign_keyPass}"
        keyStore = "${sign_keyStore}"
        storePass = "${sign_storePass}"
        alias = "${sign_alias}"
    }
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

dependencies {

    // at runtime, use the full JEI jar (no build dependency, this is for testing purposes ONLY!
    runtime "mezz.jei:jei_${project.minecraft_version}:${project.jei_version}"
    tasks.build.dependsOn javadoc, javadocJar, apiJar, signJar
    tasks.curseforge.dependsOn build
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'resources'
		}
	}
}

def curseRelations = {
    //optionalLibrary '' //add curseforge-slug here
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'		
    }

    //ATs
    rename '(.+_at.cfg)', 'META-INF/$1'
}

curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    project {
        id = "${project.curse_id}"
        changelogType = 'markdown'
        changelog = getChangelogText()
        releaseType = 'release'

        //relations curseRelations //TODO uncomment this when adding curse relations

        addArtifact javadocJar
        addArtifact sourceJar
        addArtifact apiJar

        mainArtifact(jar) {
            displayName = "CraftDev-Core v${project.mod_version} MC${minecraft_version}"
        }
    }
}

String getChangelogText() {
    def changelogFile = new File('changelog.md')
    String str = ''
    if(!changelogFile.exists()) {
        changelogFile.createNewFile()
        return str
    }
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {
                return
            }
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    return str
}
