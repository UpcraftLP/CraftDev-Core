package core.upcraftlp.craftdev.common.main;

import java.util.Arrays;

import core.upcraftlp.craftdev.API.common.ModLogger;
import core.upcraftlp.craftdev.common.CoreInternalConfig;
import core.upcraftlp.craftdev.common.CoreInternalWorldGenerator;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.relauncher.Side;

@Mod(name = CraftDevReference.MODNAME, version = CraftDevReference.VERSION, acceptedMinecraftVersions = CraftDevReference.MCVERSIONS, modid = CraftDevReference.MODID, acceptableRemoteVersions = "*", canBeDeactivated = false, updateJSON = CraftDevReference.UPDATE_JSON)
public class CraftDevCore {

	private static final ModLogger utils = new ModLogger(CraftDevReference.MODID);
	
	public static ModLogger getLogger() {
		return utils;
	}
	
	@Instance
	private static CraftDevCore instance;
	
	public static CraftDevCore getInstance() {
		return instance;
	}
	
	@EventHandler
	public void preInit(FMLPreInitializationEvent event) {
		CoreInternalConfig.init(event);
		GameRegistry.registerWorldGenerator(new CoreInternalWorldGenerator(), Integer.MAX_VALUE - 5);
		if(event.getSide() == Side.CLIENT) {
			ModMetadata data = event.getModMetadata();
			data.autogenerated = false;
			data.authorList = Arrays.asList(CraftDevReference.authors);
			data.credits = CraftDevReference.CREDITS;
			data.modId = CraftDevReference.MODID;
			data.name = CraftDevReference.MODNAME;
			data.description = CraftDevReference.MOD_DESCRIPTION;
			data.url = CraftDevReference.UPDATE_URL;
			data.updateJSON = CraftDevReference.UPDATE_JSON;
		}
		utils.println("Pre-Initialization finished.");
	}
	
	@EventHandler
	public void init(FMLInitializationEvent event) {
		utils.println("Initialization finished.");
	}
	
	@EventHandler
	public void postInit(FMLPostInitializationEvent event) {
		utils.println("Post-Initialization finished.");
	}
	
	
}
