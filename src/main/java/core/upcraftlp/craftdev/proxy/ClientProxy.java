package core.upcraftlp.craftdev.proxy;

import java.util.Arrays;

import core.upcraftlp.craftdev.client.MobScaleHandler;
import core.upcraftlp.craftdev.common.CraftDevReference;
import core.upcraftlp.craftdev.config.CoreInternalConfig;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.NonNullList;
import net.minecraft.util.text.TextFormatting;
import net.minecraftforge.client.model.ModelLoader;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

@SideOnly(Side.CLIENT)
public class ClientProxy extends CommonProxy {

    @Override
    public void preInit(FMLPreInitializationEvent event) {
        super.preInit(event);

        ModMetadata data = event.getModMetadata();
        data.autogenerated = false;
        data.authorList = Arrays.asList(CraftDevReference.authors);
        data.credits = TextFormatting.GOLD + CraftDevReference.CREDITS;
        data.modId = CraftDevReference.MODID;
        data.name = CraftDevReference.MODNAME;
        data.description = TextFormatting.AQUA + CraftDevReference.MOD_DESCRIPTION;
        data.url = CraftDevReference.UPDATE_URL;
        data.updateJSON = CraftDevReference.UPDATE_JSON;
    }

    @Override
    public void init(FMLInitializationEvent event) {
        super.init(event);
    }

    @Override
    public void postInit(FMLPostInitializationEvent event) {
        super.postInit(event);
    }

    @Override
    public void serverStarting(FMLServerStartingEvent event) {
        super.serverStarting(event);
    }

    @Override
    public void registerRender(Item item) {
        super.registerRender(item);
        if (item.getHasSubtypes()) {
            NonNullList<ItemStack> items = NonNullList.create();
            item.getSubItems(CreativeTabs.SEARCH, items);
            for (ItemStack stack : items) {
                int meta = stack.getMetadata();
                ModelLoader.setCustomModelResourceLocation(item, meta, new ModelResourceLocation(item.getRegistryName() + "_" + meta, "inventory"));
            }
        } else {
            ModelLoader.setCustomModelResourceLocation(item, 0, new ModelResourceLocation(item.getRegistryName(), "inventory"));
        }
    }
}
